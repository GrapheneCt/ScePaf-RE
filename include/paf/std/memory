#ifndef _VDSUITE_USER_PAF_STD_MEMORY_H
#define _VDSUITE_USER_PAF_STD_MEMORY_H

namespace paf {

	template <typename T>
	class intrusive_ptr
	{
	public:

		inline intrusive_ptr()
		{
			m_ptr = NULL;
		}

		inline intrusive_ptr(T *p, bool add_ref_flag)
		{
			m_ptr = p;
			if (add_ref_flag)
			{
				add_ref();
			}
		}

		inline intrusive_ptr(const intrusive_ptr<T>& r)
		{
			assign(r.m_ptr);
		}

		inline ~intrusive_ptr()
		{
			if (m_ptr != NULL)
			{
				m_ptr->Release();
			}
		}

		inline clear()
		{
			if (m_ptr != NULL)
			{
				m_ptr->Release();
				m_ptr = NULL;
			}
		}

		inline intrusive_ptr<T>& operator=(T *p)
		{
			assign(p);
		}

		inline intrusive_ptr<T>& operator=(const intrusive_ptr<T>& r)
		{
			assign(r.m_ptr);
		}

		inline T* get() const
		{
			return m_ptr;
		}

		inline T& operator*() const
		{
			return *m_ptr;
		}

		inline T* operator->() const
		{
			return m_ptr;
		}

	protected:

		inline void assign(T *p)
		{
			if (p != m_ptr)
			{
				if (m_ptr != NULL)
				{
					m_ptr->Release();
				}
				m_ptr = p;
				add_ref();
			}
		}

		inline void add_ref()
		{
			if (m_ptr != NULL)
			{
				m_ptr->AddRef();
			}
		}

		T* m_ptr;
	};

	template <typename T>
	class allocator
	{
	public:
		typedef size_t size_type;
		typedef ptrdiff_t difference_type;
		typedef T* pointer;
		typedef const T* const_pointer;
		typedef T& reference;
		typedef const T& const_reference;
		typedef T value_type;

		allocator() {}

		~allocator() {}

		template <class U> allocator(const allocator<U>&) {}

		template <class U>
		struct rebind { typedef allocator<U> other; };

		pointer address(reference x) const { return &x; }

		const_pointer address(const_reference x) const { return &x; }

		size_type max_size() const { return paf::memory::HeapAllocator::GetGlobalHeapAllocator()->GetFreeSize() / sizeof(value_type); }

		pointer allocate(size_type n, const void * hint = 0)
		{
			return static_cast<pointer>(sce_paf_malloc(n * sizeof(T)));
		}

		void deallocate(pointer p, size_type n)
		{
			sce_paf_free(p);
		}

		void construct(pointer p, const T& val)
		{
			new(static_cast<void*>(p)) T(val);
		}

		void construct(pointer p)
		{
			new(static_cast<void*>(p)) T();
		}

		void destroy(pointer p)
		{
			p->~T();
		}

		bool operator==(const allocator& other)
		{
			return true;
		}
	};
}

#include <memory>
#include <paf/std/std_bridge>

#endif